import { nearestExit } from "./nearestExit";

describe("nearestExit", () => {
  it("case 1", () => {
    const maze = [
        ["+", "+", ".", "+"],
        [".", ".", ".", "+"],
        ["+", "+", "+", "."],
      ],
      entrance = [1, 2];
    const step = nearestExit(maze, entrance);
    console.log(step);
  });

  it("case 2", () => {
    const maze = [
        [
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
          ".",
          "+",
          "+",
          "+",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          "+",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          ".",
          ".",
          "+",
        ],
        [
          "+",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
        ],
        [
          ".",
          "+",
          "+",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          "+",
          "+",
          "+",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
        ],
        [
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          "+",
          "+",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
        ],
        [
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
          ".",
          "+",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          "+",
          "+",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
        ],
        [
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          "+",
          "+",
        ],
        [
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
          ".",
          ".",
          "+",
          ".",
          ".",
          "+",
        ],
        [
          ".",
          "+",
          ".",
          "+",
          "+",
          "+",
          ".",
          ".",
          ".",
          ".",
          "+",
          "+",
          ".",
          ".",
          "+",
          ".",
          "+",
          ".",
          ".",
          ".",
        ],
      ],
      entrance = [17, 18];
    const step = nearestExit(maze, entrance);
    console.log(step);
  });
});
