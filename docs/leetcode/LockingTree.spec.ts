import { LockingTree } from "./LockingTree";

function opt(operation: string[], params: number[][]) {
  let tree = Reflect.construct(LockingTree, params[0]);
  const results: (boolean | null)[] = [null];
  for (let i = 1; i < operation.length; i++) {
    const opCmd = operation[i];
    const result = Reflect.apply(tree[opCmd], tree, params[i]) as boolean;
    results.push(result);
  }
  return results;
}

describe("locking tree", () => {
  // it("case 1", () => {
  //   const cmd = [
  //     "LockingTree",
  //     "lock",
  //     "unlock",
  //     "unlock",
  //     "lock",
  //     "upgrade",
  //     "lock",
  //   ];
  //   const args = [
  //     [[-1, 0, 0, 1, 1, 2, 2]],
  //     [2, 2],
  //     [2, 3],
  //     [2, 2],
  //     [4, 5],
  //     [0, 1],
  //     [0, 1],
  //   ];
  //   const results = opt(cmd, args as any);
  //   expect(results).toEqual([null, true, false, true, true, true, false]);
  // });

  // it("case 2", () => {
  //   const cmd = [
  //     "LockingTree",
  //     "upgrade",
  //     "upgrade",
  //     "unlock",
  //     "lock",
  //     "upgrade",
  //   ];
  //   const args = [[[-1, 0, 3, 1, 0]], [4, 5], [3, 8], [0, 7], [2, 7], [4, 6]];
  //   const results = opt(cmd, args as any);
  //   expect(results).toEqual([null, false, false, false, true, false]);
  // });

  // it("case 3", () => {
  //   const cmd = [
  //     "LockingTree",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "unlock",
  //     "unlock",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "lock",
  //     "lock",
  //     "upgrade",
  //     "upgrade",
  //     "unlock",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "unlock",
  //     "unlock",
  //   ];
  //   const args = [
  //     [[-1, 6, 5, 5, 7, 0, 7, 0, 0, 6]],
  //     [5, 3],
  //     [2, 3],
  //     [7, 39],
  //     [1, 32],
  //     [5, 44],
  //     [2, 15],
  //     [1, 11],
  //     [1, 18],
  //     [3, 7],
  //     [5, 36],
  //     [5, 42],
  //     [8, 5],
  //     [1, 19],
  //     [3, 38],
  //     [0, 27],
  //     [4, 11],
  //     [9, 2],
  //     [8, 41],
  //     [5, 36],
  //     [7, 29],
  //   ];
  //   const results = opt(cmd, args as any);
  //   expect(results).toEqual([
  //     null,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //     true,
  //     false,
  //     false,
  //     false,
  //     false,
  //     true,
  //     false,
  //     false,
  //     false,
  //     false,
  //     false,
  //   ]);
  // });

  // it("case 4", () => {
  //   const cmd = [
  //     "LockingTree",
  //     // "upgrade",
  //     // "unlock",
  //     // "unlock",
  //     // "upgrade",
  //     // "unlock",
  //     // "upgrade",
  //     // "upgrade",
  //     "lock",
  //     "unlock",
  //     "lock",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "upgrade",
  //     "lock",
  //     "upgrade",
  //     "lock",
  //     "lock",
  //   ];
  //   const args = [
  //     [[-1, 4, 0, 2, 5, 0, 4, 8, 2, 4]],
  //     // [9, 22],
  //     // [6, 21],
  //     // [8, 40],
  //     // [3, 24],
  //     // [3, 24],
  //     // [6, 17],
  //     // [4, 42],
  //     [6, 41],
  //     [5, 40],
  //     [6, 14],
  //     [9, 6],
  //     [2, 46],
  //     [0, 7],
  //     [8, 13],
  //     [2, 47],
  //     [3, 5],
  //     [5, 17],
  //     [7, 9],
  //     [5, 32],
  //     [9, 46],
  //   ];
  //   const results = opt(cmd, args as any);
  //   expect(results).toEqual([
  //     null,
  //     // false,
  //     // false,
  //     // false,
  //     // false,
  //     // false,
  //     // false,
  //     // false,
  //     true,
  //     false,
  //     false,
  //     false,
  //     false,
  //     true,
  //     false,
  //     false,
  //     false,
  //     true,
  //     false,
  //     false,
  //     true,
  //   ]);
  // });

  it("case 6", () => {
    const cmd = [
      "LockingTree",
      "lock",
      "upgrade",
      "lock",
      "upgrade",
      "upgrade",
      "lock",
      "lock",
      "upgrade",
      "upgrade",
      "lock",
      "unlock",
      "upgrade",
      "upgrade",
      "lock",
      "unlock",
      "upgrade",
      "upgrade",
      "upgrade",
      "lock",
      "upgrade",
      "unlock",
      "unlock",
      "lock",
      "upgrade",
      "unlock",
      "upgrade",
      "unlock",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "lock",
      "upgrade",
      "upgrade",
      "unlock",
      "upgrade",
      "upgrade",
      "unlock",
      "unlock",
      "unlock",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "lock",
      "upgrade",
      "unlock",
      "upgrade",
      "upgrade",
      "lock",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "unlock",
      "lock",
      "lock",
      "upgrade",
      "lock",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "lock",
      "unlock",
      "upgrade",
      "lock",
      "unlock",
      "upgrade",
      "upgrade",
      "unlock",
      "unlock",
      "lock",
      "upgrade",
      "upgrade",
      "lock",
      "upgrade",
      "upgrade",
      "lock",
      "lock",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "upgrade",
      "unlock",
      "upgrade",
      "unlock",
      "upgrade",
      "upgrade",
      "unlock",
      "lock",
      "upgrade",
    ];
    const args = [
      [
        [
          -1, 36, 21, 22, 5, 41, 23, 0, 14, 15, 26, 24, 41, 33, 13, 22, 4, 16,
          0, 22, 7, 6, 18, 8, 0, 13, 24, 26, 15, 37, 18, 18, 13, 40, 4, 28, 18,
          0, 8, 24, 18, 30, 19, 34, 24, 22, 19, 20, 27, 26,
        ],
      ],
      [35, 3],
      [38, 34],
      [35, 73],
      [13, 59],
      [12, 71],
      [37, 41],
      [16, 33],
      [45, 74],
      [38, 46],
      [16, 66],
      [8, 78],
      [49, 4],
      [41, 99],
      [37, 14],
      [37, 41],
      [29, 17],
      [4, 85],
      [4, 11],
      [16, 31],
      [47, 47],
      [46, 44],
      [37, 18],
      [43, 58],
      [47, 62],
      [16, 33],
      [33, 59],
      [35, 3],
      [42, 67],
      [9, 10],
      [18, 41],
      [18, 67],
      [7, 40],
      [20, 32],
      [5, 76],
      [25, 71],
      [43, 19],
      [26, 68],
      [34, 49],
      [43, 58],
      [0, 72],
      [38, 66],
      [47, 85],
      [1, 69],
      [44, 75],
      [32, 5],
      [23, 15],
      [23, 87],
      [43, 81],
      [36, 15],
      [46, 29],
      [36, 15],
      [42, 68],
      [1, 83],
      [35, 81],
      [44, 27],
      [16, 54],
      [47, 54],
      [14, 61],
      [0, 11],
      [10, 78],
      [10, 79],
      [35, 81],
      [38, 42],
      [1, 92],
      [31, 55],
      [38, 98],
      [19, 13],
      [17, 42],
      [10, 77],
      [15, 63],
      [1, 5],
      [38, 42],
      [44, 1],
      [37, 37],
      [1, 92],
      [41, 44],
      [16, 53],
      [21, 27],
      [21, 90],
      [37, 83],
      [26, 33],
      [37, 30],
      [37, 52],
      [12, 16],
      [37, 74],
      [37, 94],
      [15, 54],
      [43, 19],
      [1, 54],
      [27, 36],
      [44, 62],
      [18, 52],
      [37, 37],
      [6, 58],
      [36, 89],
      [38, 28],
      [41, 41],
      [15, 54],
      [44, 82],
      [0, 99],
    ];
    const results = opt(cmd, args as any);
    expect(results).toEqual([
      null,
      true,
      false,
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      true,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      true,
      true,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      true,
      true,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      true,
      true,
      false,
    ]);
  });
});
