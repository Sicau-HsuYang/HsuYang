(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{383:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"装饰模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰模式"}},[t._v("#")]),t._v(" 装饰模式")]),t._v(" "),a("h3",{attrs:{id:"_1、基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、基本概念"}},[t._v("#")]),t._v(" 1、基本概念")]),t._v(" "),a("p",[t._v("装饰模式是为已有功能动态的添加更多功能的一种方式")]),t._v(" "),a("p",[t._v("当系统需要新功能的时候，是向旧的类中添加新的代码，这些新加的代码通常装饰了原有类的核心职责或者主要行为。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:t.$withBase("/design-pattern/decorate-pattern.png"),alt:"装饰模式"}})]),t._v(" "),a("p",[t._v("上述"),a("code",[t._v("UML")]),t._v("图含义如下："),a("code",[t._v("Decorator")]),t._v("不仅需要实现"),a("code",[t._v("Component")]),t._v("类，并且其内部还需要依赖一个"),a("code",[t._v("Component")]),t._v("类，具体的业务根据需要来继承"),a("code",[t._v("Decorator")]),t._v("类")]),t._v(" "),a("h3",{attrs:{id:"_2、代码示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、代码示例"}},[t._v("#")]),t._v(" 2、代码示例")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);