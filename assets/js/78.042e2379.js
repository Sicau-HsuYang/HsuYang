(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{398:function(t,a,s){"use strict";s.r(a);var r=s(14),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"职责链模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[t._v("#")]),t._v(" 职责链模式")]),t._v(" "),a("h3",{attrs:{id:"_1、基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、基本概念"}},[t._v("#")]),t._v(" 1、基本概念")]),t._v(" "),a("p",[t._v("职责链模式可以说是前端中几乎最常见的设计模式了，但是可能大家并没有注意到这就是职责链模式，像日常开发中的"),a("code",[t._v("Promise")]),t._v("，异步请求神器"),a("code",[t._v("axios")]),t._v("的请求或响应拦截器。")]),t._v(" "),a("p",[t._v("职责链模式："),a("strong",[t._v("使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，直到有一个对象处理它为止。")])]),t._v(" "),a("p",[t._v("当客户提交一个请求时，请求是沿着一个业务处理链进行传递。")]),t._v(" "),a("h3",{attrs:{id:"_2、代码范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、代码范式"}},[t._v("#")]),t._v(" 2、代码范式")]),t._v(" "),a("h3",{attrs:{id:"_3、在前端开发中的实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、在前端开发中的实践"}},[t._v("#")]),t._v(" 3、在前端开发中的实践")])])}),[],!1,null,null,null);a.default=_.exports}}]);